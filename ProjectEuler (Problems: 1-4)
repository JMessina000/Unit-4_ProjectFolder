import time


def problem_1():   # This will take all numbers bellow 1000 and brute force check if they are multipules of 3 or 5 and will add them to the sum if they are
    Sum = 0
    x = 1
    while x < 1000:
        if x % 3 == 0 or x % 5 == 0:
            Sum = Sum + x
            x = x + 1
        else:
            x = x + 1
    return Sum

# print(problem_1())


def problem_2():  # This function takes the first 2 numbers and adds them together to generate the next fibonnaci number and then shifts all of the numbers by 1
    n1 = 1
    n2 = 2
    Sum = 2
    while n1 <= 4000000 or n2 <= 4000000:
        nth = n1 + n2
        if nth % 2 == 0:
            Sum = Sum + nth
        n1 = n2
        n2 = nth
    return Sum

# print(problem_2())


def problem_3():  # This divides the num by i which is increased by 1 each time until it finds the largest possible prime factor
    num = 600851475143
    i = 2
    while i * i < num:
        while num % i == 0:
            num = num / i
        i = i + 1
    return num

# print(problem_3())


def problem_4():  # This has a function to check if a number is a palindrome and then a number is multiplied by every combination of 2 3-digit numbers and everytime a larger palidrome is found it replaces the previous plaindrome

    start = time.time()

    def isPalindrome(n):
        num = str(n)
        reverse_number = ''
        for k in num:
            reverse_number = k + reverse_number
        if reverse_number == num:
            return True
        return False

    largest_palindrome = 0

    for i in range(1000,100,-1):
        for j in range(1000,100,-1):
            num = i*j
            if num > largest_palindrome:
                if isPalindrome(num):
                    largest_palindrome = num

    print("Largest palindrome is: ")
    print(largest_palindrome)

    print("Code execution time: ")
    print(time.time()-start)

# problem_4()

# PROBLEMS 1-4 TOOK 4 WORK SESSIONS OF 1HR
